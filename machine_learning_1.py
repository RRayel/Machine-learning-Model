{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:57:28.458673Z\",\"iopub.execute_input\":\"2025-09-29T04:57:28.459442Z\",\"iopub.status.idle\":\"2025-09-29T04:57:28.464432Z\",\"shell.execute_reply.started\":\"2025-09-29T04:57:28.459416Z\",\"shell.execute_reply\":\"2025-09-29T04:57:28.463446Z\"}}\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:57:28.465984Z\",\"iopub.execute_input\":\"2025-09-29T04:57:28.466461Z\",\"iopub.status.idle\":\"2025-09-29T04:57:28.481472Z\",\"shell.execute_reply.started\":\"2025-09-29T04:57:28.466435Z\",\"shell.execute_reply\":\"2025-09-29T04:57:28.480403Z\"}}\nfeet = np.linspace(0, 100, 100)   # 100 values from 0 to 100 feet this is use as input\nmeters = feet * 0.3048 #creates a 1 dimensional numpy array\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:57:28.482354Z\",\"iopub.execute_input\":\"2025-09-29T04:57:28.482708Z\",\"iopub.status.idle\":\"2025-09-29T04:57:28.497974Z\",\"shell.execute_reply.started\":\"2025-09-29T04:57:28.482670Z\",\"shell.execute_reply\":\"2025-09-29T04:57:28.496661Z\"}}\n# Reshape to (n_samples, 1) because Keras expects 2D inputs\nX = feet.reshape(-1, 1)\ny = meters.reshape(-1, 1)\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:57:28.499691Z\",\"iopub.execute_input\":\"2025-09-29T04:57:28.500054Z\",\"iopub.status.idle\":\"2025-09-29T04:57:28.526512Z\",\"shell.execute_reply.started\":\"2025-09-29T04:57:28.500026Z\",\"shell.execute_reply\":\"2025-09-29T04:57:28.525764Z\"}}\n#here we create the model and call the keras API\nmodel = keras.Sequential([\n    layers.Dense(units=1 , input_shape=[1]) #units is the 1 output neuron, and input shape tells keras to expect vector of length 1\n])\n#the equation for the following neuron ouput = weight * input+bias\n\n#optimizer depending on the learning process is the learning speed you are giving the machine\nmodel.compile(optimizer=\"adam\", loss=\"mean_squared_error\") \n#loss being mean squared error is just to show how far the predicted value is from the actual value and adjust the weight accordingly\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:57:28.527262Z\",\"iopub.execute_input\":\"2025-09-29T04:57:28.527623Z\",\"iopub.status.idle\":\"2025-09-29T04:58:13.065490Z\",\"shell.execute_reply.started\":\"2025-09-29T04:57:28.527532Z\",\"shell.execute_reply\":\"2025-09-29T04:58:13.064620Z\"}}\nhistory = model.fit(X, y, epochs=1000, verbose=0)\n#x and y are the training data\n#epochs being 500 means the dataset is being shown to the network 500 times and if you change it to 1000 then it shows 1000 time\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:58:13.066738Z\",\"iopub.execute_input\":\"2025-09-29T04:58:13.067027Z\",\"iopub.status.idle\":\"2025-09-29T04:58:13.185240Z\",\"shell.execute_reply.started\":\"2025-09-29T04:58:13.067008Z\",\"shell.execute_reply\":\"2025-09-29T04:58:13.184098Z\"}}\ntest_values = np.array([10,15,20, 25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100])  # feet\npredictions = model.predict(test_values)\n#the test values are the number of feet that will be converted\n#the predictions now puts those values in the model \n\n\nfor f, p in zip(test_values, predictions):\n    print(f\"{f} feet â†’ predicted {p[0]:.4f} meters | actual {f*0.3048:.4f} meters\")\n#pairs zip function pairs the predicted values with the test values\n#p[0] accesses the scalar inside the 1-element prediction array for that sample\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2025-09-29T04:58:13.186217Z\",\"iopub.execute_input\":\"2025-09-29T04:58:13.186439Z\",\"iopub.status.idle\":\"2025-09-29T04:58:13.193215Z\",\"shell.execute_reply.started\":\"2025-09-29T04:58:13.186422Z\",\"shell.execute_reply\":\"2025-09-29T04:58:13.192082Z\"}}\n# Check learned weight (should be close to 0.3048)\nweights, bias = model.layers[0].get_weights()\nprint(\"\\nLearned weight:\", weights[0][0], \" | Learned bias:\", bias[0])","metadata":{"_uuid":"b2ed50b4-26f0-4ea7-9031-d5236657b66b","_cell_guid":"8459e73f-e09e-4015-9fcd-9ec1f52c38b7","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}